generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    username  String   @unique
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks Attack[]
}

model Attack {
    id        Int       @id @default(autoincrement())
    startedAt DateTime? @default(now())
    endedAt   DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    user               User                     @relation(fields: [userId], references: [id])
    userId             Int
    intensity          Intensity?               @relation(fields: [intensityId], references: [id])
    intensityId        Int?
    medication         Medication?              @relation(fields: [medicationId], references: [id])
    medicationId       Int?
    type               Type?                    @relation(fields: [typeId], references: [id])
    typeId             Int?
    physicalLocation   PhysicalLocation?        @relation(fields: [physicalLocationId], references: [id])
    physicalLocationId Int?
    note               Note?                    @relation(fields: [noteId], references: [id])
    noteId             Int?                      @unique
    symptoms           AttacksOnSymptoms[]
    triggers           AttacksOnTriggers[]
    effects            AttacksOnEffects[]
    auras              AttacksOnAuras[]
    reliefMethods      AttacksOnReliefMethods[]
    painLocations      AttacksOnPainLocations[]
}

model Intensity {
    id        Int      @id @default(autoincrement())
    number    Int      @unique
    level     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks Attack[]
}

model Medication {
    id        Int      @id @default(autoincrement())
    drug      String
    dose      String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks Attack[]
}

model Type {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks Attack[]
}

model PhysicalLocation {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks Attack[]
}

model Note {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attack Attack?
}

model Symptom {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnSymptoms[]
}

model AttacksOnSymptoms {
    attack    Attack  @relation(fields: [attackId], references: [id])
    attackId  Int     
    symptom   Symptom @relation(fields: [symptomId], references: [id])
    symptomId Int   
    @@id([attackId, symptomId])  
}

model Trigger {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnTriggers[]
}

model AttacksOnTriggers {
    attack    Attack  @relation(fields: [attackId], references: [id])
    attackId  Int     
    trigger   Trigger @relation(fields: [triggerId], references: [id])
    triggerId Int  
    @@id([attackId, triggerId])   
}

model Effect {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnEffects[]
}

model AttacksOnEffects {
    attack   Attack @relation(fields: [attackId], references: [id])
    attackId Int    
    effect   Effect @relation(fields: [effectId], references: [id])
    effectId Int    
    @@id([attackId, effectId])
}

model Aura {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnAuras[]
}

model AttacksOnAuras {
    attack   Attack @relation(fields: [attackId], references: [id])
    attackId Int    
    aura     Aura   @relation(fields: [auraId], references: [id])
    auraId   Int 
    @@id([attackId, auraId])     
}

model ReliefMethod {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnReliefMethods[]
}

model AttacksOnReliefMethods {
    attack         Attack       @relation(fields: [attackId], references: [id])
    attackId       Int          
    reliefMethod   ReliefMethod @relation(fields: [reliefMethodId], references: [id])
    reliefMethodId Int   
    @@id([attackId, reliefMethodId])       
}

model PainLocation {
    id        Int      @id @default(autoincrement())
    location  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attacks AttacksOnPainLocations[]
}

model AttacksOnPainLocations {
    attack         Attack       @relation(fields: [attackId], references: [id])
    attackId       Int          
    painLocation   PainLocation @relation(fields: [painLocationId], references: [id])
    painLocationId Int       
    @@id([attackId, painLocationId])  
}
